data_grid = NULL,
knot_list = list())
return(grid)
}
# Inicializar los datos de ejemplo
data <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6))
inputs <- list("x", "y")
outputs <- list("z")
d <- list(2, 2)
# Inicializar un objeto GRID correctamente
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
setClass(
"GRID",
representation(
data = "data.frame",
inputs = "list",
outputs = "list",
d = "list",
data_grid = "NULL",
knot_list = "list"
)
)
GRID <- function(data, inputs, outputs, d) {
# Constructor de la clase grid
grid <- new("GRID",
data = data,
inputs = inputs,
outputs = outputs,
d = d,
data_grid = NULL,
knot_list = list())
return(grid)
}
# Crear un data.frame de ejemplo
data <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6))
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- list("x", "y")
outputs <- list("z")
d <- list(2, 2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Verificar el objeto creado
print(grid)
setwd("~/Desktop/svfpackage/data")
setwd("~/Desktop/svfpackage")
setClass(
"GRID",
representation(
data = "data.frame",
inputs = "list",
outputs = "list",
d = "list",
data_grid = "NULL",
knot_list = "list"
)
)
GRID <- function(data, inputs, outputs, d) {
# Constructor de la clase grid
grid <- new("GRID",
data = data,
inputs = inputs,
outputs = outputs,
d = d,
data_grid = NULL,
knot_list = list())
return(grid)
}
# Crear un data.frame de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
setClass(
"GRID",
representation(
data = "data.frame",
inputs = "character",
outputs = "character",
d = "character",
data_grid = "NULL",
knot_list = "list"
)
)
GRID <- function(data, inputs, outputs, d) {
# Constructor de la clase grid
grid <- new("GRID",
data = data,
inputs = inputs,
outputs = outputs,
d = d,
data_grid = NULL,
knot_list = list())
return(grid)
}
# Crear un data.frame de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
setClass(
"GRID",
representation(
data = "data.frame",
inputs = "character",
outputs = "character",
d = "numeric",
data_grid = "NULL",
knot_list = "list"
)
)
GRID <- function(data, inputs, outputs, d) {
# Constructor de la clase grid
grid <- new("GRID",
data = data,
inputs = inputs,
outputs = outputs,
d = d,
data_grid = NULL,
knot_list = list())
return(grid)
}
# Crear un data.frame de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Verificar el objeto creado
print(grid)
setClass(
"GRID",
representation(
data = "data.frame",
inputs = "character",
outputs = "character",
d = "numeric",
data_grid = "NULL",
knot_list = "list"
)
)
GRID <- function(data, inputs, outputs, d) {
# Constructor de la clase grid
grid <- new("GRID",
data = data,
inputs = inputs,
outputs = outputs,
d = d,
data_grid = NULL,
knot_list = list())
return(grid)
}
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el gráfico con ggplot2
ggplot(data, aes_string(x = inputs[1], y = inputs[2])) +
geom_point() +  # Añadir puntos
geom_vline(xintercept = grid$knot_list[[1]], linetype = "dashed") +  # Líneas verticales del grid
geom_hline(yintercept = grid$knot_list[[2]], linetype = "dashed") +  # Líneas horizontales del grid
labs(x = inputs[1], y = inputs[2], title = "GRID y puntos dentro del mismo") +
theme_minimal()
library(ggplot2)
# Crear un data.frame de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Obtener las coordenadas de los nodos del grid
x_knots <- grid@knot_list[[1]]
y_knots <- grid@knot_list[[2]]
# Generar el gráfico con ggplot2
ggplot(data, aes_string(x = inputs[1], y = inputs[2])) +
geom_point() +  # Añadir puntos
geom_vline(xintercept = x_knots, linetype = "dashed") +  # Líneas verticales del grid
geom_hline(yintercept = y_knots, linetype = "dashed") +  # Líneas horizontales del grid
labs(x = inputs[1], y = inputs[2], title = "GRID y puntos dentro del mismo") +
theme_minimal()
library(ggplot2)
# Crear un data.frame de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Obtener los nodos del grid
x_knots <- seq(min(data[[inputs[1]]]), max(data[[inputs[1]]]), length.out = d[1] + 1)
y_knots <- seq(min(data[[inputs[2]]]), max(data[[inputs[2]]]), length.out = d[2] + 1)
library(ggplot2)
# Crear un data.frame de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(x1), max(x1), length.out = d[1])
x2_grid <- seq(min(x2), max(x2), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid, x2_grid)
# Graficar el grid
plot(x1, x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(x1), ylim = range(x2))
grid()
abline(v = x1_grid, col = 'red')
abline(h = x2_grid, col = 'red')
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(x1), max(x1), length.out = d[1])
x2_grid <- seq(min(x2), max(x2), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid, x2_grid)
# Graficar el grid
plot(x1, x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(x1), ylim = range(x2))
grid()
abline(v = x1_grid, col = 'red')
abline(h = x2_grid, col = 'red')
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(x1), max(x1), length.out = d[1])
x2_grid <- seq(min(x2), max(x2), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid, x2_grid)
# Graficar el grid
plot(x1, x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(x1), ylim = range(x2))
grid()
abline(v = x1_grid, col = 'red')
abline(h = x2_grid, col = 'red')
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
print(grid)
# Generar el grid
x1_grid <- seq(min("x1"), max("x1"), length.out = d[1])
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
print(grid)
# Generar el grid
x1_grid <- seq(min('x1'), max('x1'), length.out = d[1])
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(data$x1), max(data$x1), length.out = d[1])
x2_grid <- seq(min(data$x2), max(data$x2), length.out = d[2])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid, x2_grid)
# Graficar el grid
plot(data$x1, data$x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(data$x1), ylim = range(data$x2))
grid()
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Obtener rangos y cantidad de particiones
x1_min <- min(data$x1)
x1_max <- max(data$x1)
x2_min <- min(data$x2)
x2_max <- max(data$x2)
d1 <- d[1]
d2 <- d[2]
# Definir un valor predeterminado para d[2] si no está definido o es negativo
if (is.null(d2) || d2 <= 0) {
d2 <- 2  # Valor predeterminado
}
# Generar el grid
x1_grid <- seq(x1_min, x1_max, length.out = d1)
x2_grid <- seq(x2_min, x2_max, length.out = d2)
expand_grid <- function(...) expand.grid(...)
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(data$x1), max(data$x1), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid, x2_grid)
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(data$x1), max(data$x1), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid)
# Graficar el grid
plot(data$x1, data$x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(data$x1), ylim = range(data$x2))
grid()
abline(v = x1_grid, col = 'red')
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(data$x1), max(data$x1), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid)
# Graficar el grid
plot(data$x1, data$x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(data$x1), ylim = range(data$x2))
grid()
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(data$x1), max(data$x1), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid)
# Graficar el grid
plot(data$x1, data$x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(data$x1), ylim = range(data$x2))
grid()
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(data$x1), max(data$x1), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid)
# Graficar el grid
plot(data$x1, data$x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(data$x1), ylim = range(data$x2))
grid()
# Agregar etiquetas a cada punto
text(data$x1, data$x2, labels = 1:nrow(data), pos = 3)
source("~/Desktop/svfpackage/R/grid.R")
library(ggplot2)
# Usar el dataset de ejemplo
data <- read.table("~/Desktop/svfpackage/data/Datos.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- c(2)
# Crear un objeto GRID
grid <- GRID(data = data, inputs = inputs, outputs = outputs, d = d)
# Generar el grid
x1_grid <- seq(min(data$x1), max(data$x1), length.out = d[1])
expand_grid <- function(...) expand.grid(...)
X_grid <- expand_grid(x1_grid)
# Graficar el grid
plot(data$x1, data$x2, col = 'blue', xlab = 'x1', ylab = 'x2', main = 'Grid', xlim = range(data$x1), ylim = range(data$x2))
grid()
# Agregar etiquetas a cada punto
text(data$x1, data$x2, labels = paste("(", round(data$x1, 2), ",", round(data$x2, 2), ")"), pos = 3)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(ggplot2)
#'
#' \describe{
#'   \item{\code{x1}}{Variable de entrada 1.}
#'   \item{\code{x2}}{Variable de entrada 2.}
#'   \item{\code{y1}}{Variable de salida.}
#' }
#'
#' @format Un data frame con 4 observaciones de 3 variables.
#' @source Los datos fueron creados con propósitos ilustrativos.
#' @export
setClass(
"GRID",
representation(
data = "data.frame",
inputs = "character",
outputs = "character",
d = "numeric",
data_grid = "NULL",
knot_list = "list"
)
)
#' @param data Un data.frame que contiene los datos.
#' @param inputs Un vector de caracteres que especifica las variables de entrada.
#' @param outputs Un vector de caracteres que especifica las variables de salida.
#' @param d Un vector numérico que especifica el número de particiones en cada dimensión de las variables de entrada.
#'
#' @return Un objeto de clase GRID.
#'
#' @example examples/examples_grid.R
#'
#' @export
GRID <- function(data, inputs, outputs, d) {
grid <- new("GRID",
data = data,
inputs = inputs,
outputs = outputs,
d = d,
data_grid = NULL,
knot_list = list())
return(grid)
}
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
usethis::use_data(datos)
devtools::load_all()
usethis::use_data(datos)
devtools::load_all()
devtools::load_all()
devtools::document()
