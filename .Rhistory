outputs <- c("y")
d <- 39
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0.05
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Usar la función para graficar la frontera de producción
plot_frontier(svf_instance)
source("R/svf_solution.R")
source("R/svf_functions.R")
source("R/grid.R")
source("R/svfgrid.R")
source("R/svf.R")
source("R/ssvf.R")
# Definir los datos
data <- X63_B1_40
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y")
d <- 39
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0.5
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Usar la función para graficar la frontera de producción
plot_frontier(svf_instance)
source("R/svf_solution.R")
source("R/svf_functions.R")
source("R/grid.R")
source("R/svfgrid.R")
source("R/svf.R")
source("R/ssvf.R")
# Definir los datos
data <- X63_B1_40
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y")
d <- 39
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0.01
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Usar la función para graficar la frontera de producción
plot_frontier(svf_instance)
source("R/svf_solution.R")
source("R/svf_functions.R")
source("R/grid.R")
source("R/svfgrid.R")
source("R/svf.R")
source("R/ssvf.R")
# Definir los datos
data <- X63_B1_40
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y")
d <- 39
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0.02
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Usar la función para graficar la frontera de producción
plot_frontier(svf_instance)
source("R/svf_solution.R")
source("R/svf_functions.R")
source("R/grid.R")
source("R/svfgrid.R")
source("R/svf.R")
source("R/ssvf.R")
# Definir los datos
data <- X63_B1_40
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y")
d <- 39
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0.05
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Usar la función para graficar la frontera de producción
plot_frontier(svf_instance)
source("R/svf.R")
# Usar datos de prueba
data <- read.table("data/datos2.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1", "y2")
C <- 1
eps <- 0
d <- 2
method <- 'SVF'
# Crear una instancia de la clase SVF
svf <- SVF(method, inputs, outputs, data, C, eps, d)
# Imprimir la instancia
print(svf)
source("R/svf_solution.R")
source("R/grid.R")
source("R/svfgrid.R")
source("R/svf.R")
source("R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(5, 2, 3, 4),
y1 = c(5, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- SSVF(method, inputs, outputs, data, C, eps, d)
# Entrenar el modelo
svf_instance <- train.SSVF(svf_instance)
# Exportar el modelo como cadena de texto
print(svf_instance$model)
# Resolver el modelo
solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(solution$w)
# Imprimir las soluciones de xi
print(solution$xi)
source("R/grid.R")
library(ggplot2)
# Usar datos de prueba
data <- read.table("data/datos2.txt", header = TRUE, sep = ";")
# Crear una instancia de GRID y usar sus métodos
inputs <- c("x1", "x2")
outputs <- c("y1", "y2")
d <- 2
grid_instance <- GRID(data, inputs, outputs, d)
print(grid_instance)
# Evaluar una observación igual al valor del nodo del grid
result <- transformation(3, 2)
cat("Resultado de la transformación:", result, "\n")
grid_instance$knot_list <- list(list(1, 2.5, 4), list(1, 2, 3))
dmu <- c(3, 4)
position <- search_dmu.GRID(grid_instance, dmu)
print(paste("Posición en el grid: (", paste(position - 1, collapse = ", "), ")", sep = ""))
# Función para graficar el grid
plot_GRID <- function(grid_instance, data, dmu) {
# Verificar la cantidad de inputs
num_inputs <- length(grid_instance$inputs)
if (num_inputs == 1) {
x_grid <- unlist(grid_instance$knot_list[[1]])
y_grid <- rep(0, length(x_grid))
data_df <- data.frame(x = data[[grid_instance$inputs[1]]], y = rep(0, nrow(data)))
dmu_df <- data.frame(x = dmu[[1]], y = 0)
} else {
x_grid <- unlist(grid_instance$knot_list[[1]])
y_grid <- unlist(grid_instance$knot_list[[2]])
data_df <- data.frame(x = data[[grid_instance$inputs[1]]], y = data[[grid_instance$inputs[2]]])
dmu_df <- data.frame(x = dmu[[1]], y = dmu[[2]])
}
# Crear un dataframe con los puntos del grid
grid_df <- expand.grid(x = x_grid, y = y_grid)
# Crear un gráfico
p <- ggplot() +
# Añadir los datos
geom_point(data = data_df, aes(x = x, y = y), color = "blue", size = 3) +
# Añadir la DMU
geom_point(data = dmu_df, aes(x = x, y = y), color = "red", size = 3) +
# Añadir líneas verticales y horizontales para el grid
geom_vline(xintercept = x_grid, linetype = "dotted", color = "blue") +
geom_hline(yintercept = y_grid, linetype = "dotted", color = "blue") +
# Especificar límites del gráfico y ajustar la separación en los ejes x e y
coord_cartesian(xlim = c(min(x_grid) - 1, max(x_grid) + 1), ylim = c(min(y_grid) - 1, max(y_grid) + 1)) +
scale_x_continuous(expand = expansion(add = c(0, 0.1))) +
scale_y_continuous(expand = expansion(add = c(0, 0.1))) +
# Agregar borde alrededor del gráfico
theme(
plot.margin = margin(1, 1, 1, 1, "cm"),
panel.border = element_rect(color = "black", linewidth = 0.5, fill = NA)
) +
# Configuraciones adicionales
labs(x = grid_instance$inputs[1], y = ifelse(num_inputs > 1, grid_instance$inputs[2], "Dummy Dimension"), title = "Grid con Inputs y DMU") +
theme_minimal()
return(p)
}
# Graficar el grid con los datos y la DMU
plot_GRID(grid_instance, data, dmu)
source("R/grid.R")
library(ggplot2)
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 2
# Crear instancia de GRID
grid_instance <- GRID(data, inputs, outputs, d)
print(grid_instance)
# Evaluar una observación igual al valor del nodo del grid
result <- transformation(3, 2)
cat("Resultado de la transformación:", result, "\n")
# Definir knot_list como lista de listas
grid_instance$knot_list <- list(c(1, 2.5, 4))
dmu <- c(3)
position <- search_dmu.GRID(grid_instance, dmu)
print(paste("Posición en el grid: (", paste(position - 1, collapse = ", "), ")", sep = ""))
# Función para graficar el grid
plot_GRID <- function(grid_instance, data, dmu) {
# Verificar la cantidad de inputs
num_inputs <- length(grid_instance$inputs)
if (num_inputs == 1) {
# Para un solo input, crear una segunda dimensión ficticia
x_grid <- unlist(grid_instance$knot_list[[1]])
y_grid <- rep(0, length(x_grid))  # Dimensión ficticia
data_df <- data.frame(x = data[[grid_instance$inputs[1]]], y = rep(0, nrow(data)))
dmu_df <- data.frame(x = dmu[[1]], y = 0)
} else {
# Para múltiples inputs
x_grid <- unlist(grid_instance$knot_list[[1]])
y_grid <- unlist(grid_instance$knot_list[[2]])
data_df <- data.frame(x = data[[grid_instance$inputs[1]]], y = data[[grid_instance$inputs[2]]])
dmu_df <- data.frame(x = dmu[[1]], y = dmu[[2]])
}
# Crear un dataframe con los puntos del grid
grid_df <- expand.grid(x = x_grid, y = y_grid)
# Crear un gráfico
p <- ggplot() +
# Añadir los datos
geom_point(data = data_df, aes(x = x, y = y), color = "blue", size = 3) +
# Añadir la DMU
geom_point(data = dmu_df, aes(x = x, y = y), color = "red", size = 3) +
# Añadir líneas verticales y horizontales para el grid
geom_vline(xintercept = x_grid, linetype = "dotted", color = "blue") +
geom_hline(yintercept = y_grid, linetype = "dotted", color = "blue") +
# Especificar límites del gráfico y ajustar la separación en los ejes x e y
coord_cartesian(xlim = c(min(x_grid) - 1, max(x_grid) + 1), ylim = c(min(y_grid) - 1, max(y_grid) + 1)) +
scale_x_continuous(expand = expansion(add = c(0, 0.1))) +
scale_y_continuous(expand = expansion(add = c(0, 0.1))) +
# Agregar borde alrededor del gráfico
theme(
plot.margin = margin(1, 1, 1, 1, "cm"),
panel.border = element_rect(color = "black", linewidth = 0.5, fill = NA)
) +
# Configuraciones adicionales
labs(x = grid_instance$inputs[1], y = ifelse(num_inputs > 1, grid_instance$inputs[2], "Dummy Dimension"), title = "Grid con Inputs y DMU") +
theme_minimal()
return(p)
}
# Graficar el grid con los datos y la DMU
plot_GRID(grid_instance, data, dmu)
source("R/svf_solution.R")
source("R/svf_functions.R")
source("R/grid.R")
source("R/svfgrid.R")
source("R/svf.R")
source("R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
x2 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
# Entrenar el modelo
svf_instance <- train.SSVF(svf_instance)
# Exportar el modelo como cadena de texto
print(svf_instance$model)
# Resolver el modelo
solution <- solve(svf_instance)
print(solution)
source("R/grid.R")
source("R/svfgrid.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 2
# Crear la instancia de la clase SVFGrid y llamar al método create_grid
grid_obj <- SVFGrid(data, inputs, outputs, d)
grid_obj <- create_grid.SVFGrid(grid_obj)
# Mostrar knot_list
cat("knot_list:\n")
print(grid_obj$knot_list)
# Realizar una búsqueda en el grid para una observación
dmu <- c(4)
position <- search_dmu.GRID(grid_obj, dmu)
print(paste("Posición en el grid: (", paste(position - 1, collapse = ", "), ")", sep = ""))
# Ejemplo de búsqueda de celda contigua
cell <- c(3)
contiguous_cells <- search_contiguous_cell(cell)
print(paste("Celdas contiguas: (", paste(contiguous_cells, collapse = ", "), ")", sep = ""))
# Ejemplo del calculo de phi para una celda dada
cell <- c(1)
phi_list <- calculate_dmu_phi.SVFGrid(grid_obj, cell)
print("Vector phi para la celda dada:")
print(phi_list)
print_df_grid <- function(df_grid) {
print("DF grid completo:")
temp_df <- data.frame(
id_cell = apply(df_grid$id_cells, 1, function(row) paste0("(", paste(row, collapse = ", "), ")")),
value = apply(df_grid$values, 1, function(row) paste0("(", paste(sprintf("%.1f", row), collapse = ", "), ")")),
phi = sapply(df_grid$phi, function(phi) sprintf("[%s]", paste(phi[[1]], collapse=" "))),
c_cells = sapply(df_grid$c_cells, function(cells) if (length(cells) > 0) paste(sapply(cells, function(cell) paste0("(", paste(cell, collapse = ", "), ")")), collapse = " ") else "[]")
)
print(temp_df)
}
print_df_grid(grid_obj$df_grid)
print_data_grid <- function(data_grid) {
print("Data grid completo:")
temp_df <- data.frame(
x1 = data_grid$x1,
x2 = data_grid$x2,
phi = sapply(data_grid$phi, function(phi) sprintf("[%s]", paste(phi, collapse = " "))),
c_cells = sapply(data_grid$c_cells, function(cells) if (length(cells) > 0) {
paste(sapply(cells, function(cell) paste0("(", paste(cell, collapse = ", "), ")")), collapse = " ")
} else "[]")
)
print(temp_df)
}
print_data_grid(grid_obj$data_grid)
source("R/grid.R")
source("R/svfgrid.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 2
# Crear la instancia de la clase SVFGrid y llamar al método create_grid
grid_obj <- SVFGrid(data, inputs, outputs, d)
grid_obj <- create_grid.SVFGrid(grid_obj)
# Mostrar knot_list
cat("knot_list:\n")
print(grid_obj$knot_list)
# Realizar una búsqueda en el grid para una observación
dmu <- c(4)
position <- search_dmu.GRID(grid_obj, dmu)
print(paste("Posición en el grid: (", paste(position - 1, collapse = ", "), ")", sep = ""))
# Ejemplo de búsqueda de celda contigua
cell <- c(3)
contiguous_cells <- search_contiguous_cell(cell)
print(paste("Celdas contiguas: (", paste(contiguous_cells, collapse = ", "), ")", sep = ""))
# Ejemplo del calculo de phi para una celda dada
cell <- c(1)
phi_list <- calculate_dmu_phi.SVFGrid(grid_obj, cell)
print("Vector phi para la celda dada:")
print(phi_list)
print_df_grid <- function(df_grid) {
print("DF grid completo:")
temp_df <- data.frame(
id_cell = apply(df_grid$id_cells, 1, function(row) paste0("(", paste(row, collapse = ", "), ")")),
value = apply(df_grid$values, 1, function(row) paste0("(", paste(sprintf("%.1f", row), collapse = ", "), ")")),
phi = sapply(df_grid$phi, function(phi) sprintf("[%s]", paste(phi[[1]], collapse=" "))),
c_cells = sapply(df_grid$c_cells, function(cells) if (length(cells) > 0) paste(sapply(cells, function(cell) paste0("(", paste(cell, collapse = ", "), ")")), collapse = " ") else "[]")
)
print(temp_df)
}
print_df_grid(grid_obj$df_grid)
print(grid_obj$data_grid)
source("R/grid.R")
source("R/svfgrid.R")
# Usar datos de prueba
data <- read.table("data/datos2.txt", header = TRUE, sep = ";")
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1", "x2")
outputs <- c("y1", "y2")
d <- 2
# Crear la instancia de la clase SVFGrid y llamar al método create_grid
grid_obj <- SVFGrid(data, inputs, outputs, d)
grid_obj <- create_grid.SVFGrid(grid_obj)
# Mostrar knot_list
cat("knot_list:\n")
print(grid_obj$knot_list)
# Realizar una búsqueda en el grid para una observación
dmu <- c(1, 3 )
position <- search_dmu.GRID(grid_obj, dmu)
print(paste("Posición en el grid: (", paste(position - 1, collapse = ", "), ")", sep = ""))
# Ejemplo de búsqueda de celda contigua
cell <- c(3, 2)
contiguous_cells <- search_contiguous_cell(cell)
print(paste("Celdas contiguas: (", paste(contiguous_cells, collapse = ", "), ")", sep = ""))
# Ejemplo del calculo de phi para una celda dada
cell <- c(1, 3)
phi_list <- calculate_dmu_phi.SVFGrid(grid_obj, cell)
print("Vector phi para la celda dada:")
print(phi_list)
print_df_grid <- function(df_grid) {
print("DF grid completo:")
temp_df <- data.frame(
id_cell = apply(df_grid$id_cells, 1, function(row) paste0("(", paste(row, collapse = ", "), ")")),
value = apply(df_grid$values, 1, function(row) paste0("(", paste(sprintf("%.1f", row), collapse = ", "), ")")),
phi = sapply(df_grid$phi, function(phi) sprintf("[%s]", paste(phi[[1]], collapse=" "))),
c_cells = sapply(df_grid$c_cells, function(cells) if (length(cells) > 0) paste(sapply(cells, function(cell) paste0("(", paste(cell, collapse = ", "), ")")), collapse = " ") else "[]")
)
print(temp_df)
}
print_df_grid(grid_obj$df_grid)
print(grid_obj$data_grid)
source("R/grid.R")
library(ggplot2)
# Usar datos de prueba
data <- read.table("data/datos2.txt", header = TRUE, sep = ";")
# Crear una instancia de GRID y usar sus métodos
inputs <- c("x1", "x2")
outputs <- c("y1", "y2")
d <- 2
grid_instance <- GRID(data, inputs, outputs, d)
print(grid_instance)
# Evaluar una observación igual al valor del nodo del grid
result <- transformation(3, 2)
cat("Resultado de la transformación:", result, "\n")
grid_instance$knot_list <- list(list(1, 2.5, 4), list(1, 2, 3))
dmu <- c(3, 4)
position <- search_dmu.GRID(grid_instance, dmu)
print(paste("Posición en el grid: (", paste(position - 1, collapse = ", "), ")", sep = ""))
# Función para graficar el grid
plot_GRID <- function(grid_instance, data, dmu) {
# Verificar la cantidad de inputs
num_inputs <- length(grid_instance$inputs)
if (num_inputs == 1) {
x_grid <- unlist(grid_instance$knot_list[[1]])
y_grid <- rep(0, length(x_grid))
data_df <- data.frame(x = data[[grid_instance$inputs[1]]], y = rep(0, nrow(data)))
dmu_df <- data.frame(x = dmu[[1]], y = 0)
} else {
x_grid <- unlist(grid_instance$knot_list[[1]])
y_grid <- unlist(grid_instance$knot_list[[2]])
data_df <- data.frame(x = data[[grid_instance$inputs[1]]], y = data[[grid_instance$inputs[2]]])
dmu_df <- data.frame(x = dmu[[1]], y = dmu[[2]])
}
# Crear un dataframe con los puntos del grid
grid_df <- expand.grid(x = x_grid, y = y_grid)
# Crear un gráfico
p <- ggplot() +
# Añadir los datos
geom_point(data = data_df, aes(x = x, y = y), color = "blue", size = 3) +
# Añadir la DMU
geom_point(data = dmu_df, aes(x = x, y = y), color = "red", size = 3) +
# Añadir líneas verticales y horizontales para el grid
geom_vline(xintercept = x_grid, linetype = "dotted", color = "blue") +
geom_hline(yintercept = y_grid, linetype = "dotted", color = "blue") +
# Especificar límites del gráfico y ajustar la separación en los ejes x e y
coord_cartesian(xlim = c(min(x_grid) - 1, max(x_grid) + 1), ylim = c(min(y_grid) - 1, max(y_grid) + 1)) +
scale_x_continuous(expand = expansion(add = c(0, 0.1))) +
scale_y_continuous(expand = expansion(add = c(0, 0.1))) +
# Agregar borde alrededor del gráfico
theme(
plot.margin = margin(1, 1, 1, 1, "cm"),
panel.border = element_rect(color = "black", linewidth = 0.5, fill = NA)
) +
# Configuraciones adicionales
labs(x = grid_instance$inputs[1], y = ifelse(num_inputs > 1, grid_instance$inputs[2], "Dummy Dimension"), title = "Grid con Inputs y DMU") +
theme_minimal()
return(p)
}
# Graficar el grid con los datos y la DMU
plot_GRID(grid_instance, data, dmu)
