svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
source("~/Documents/GitHub/svfpackage/R/svf_solution.R")
source("~/Documents/GitHub/svfpackage/R/svf_functions.R")
source("~/Documents/GitHub/svfpackage/R/grid.R")
source("~/Documents/GitHub/svfpackage/R/svfgrid.R")
source("~/Documents/GitHub/svfpackage/R/svf.R")
source("~/Documents/GitHub/svfpackage/R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 3
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
library(ggplot2)
#' Función que crea un objeto del tipo SVF en función del método que se selecciona
#'
#' Esta función es un constructor que permite crear diferentes tipos de objetos SVF.
#' Actualmente, solo soporta el tipo 'SSVF', pero puede ser extendida para incluir
#' otros tipos. Si el método especificado no es soportado, se producirá un error.
#'
#' @param method Método SVF que se quiere utilizar.
#' @param inputs Inputs a evaluar en el conjunto de datos.
#' @param outputs Outputs a evaluar en el conjunto de datos.
#' @param data Conjunto de datos a evaluar.
#' @param c Valores del hiperparámetro C del modelo.
#' @param eps Valores del hiperparámetro épsilon del modelo.
#' @param d Valor del hiperparámetro d del modelo.
#'
#' @example examples/example_create_svf.R
#'
#' @return Devuelve un objeto del método SVF seleccionado.
#'
#' @export
create_SVF <- function(method, inputs, outputs, data, c, eps, d) {
if (method == "SSVF") {
svf <- SSVF(method, inputs, outputs, data, c, eps, d)
} else {
stop("The method selected doesn't exist")
}
return(svf)
}
plot_svf_frontier <- function(svf_instance) {
# Crear un grid de puntos para graficar
x_min <- min(svf_instance$data[[svf_instance$inputs[1]]])
x_max <- max(svf_instance$data[[svf_instance$inputs[1]]])
x_range <- seq(x_min, x_max, length.out = 500)
# Obtener las predicciones del modelo para cada punto en el grid
y_predictions <- sapply(x_range, function(x) {
# Asegurarse de que x sea numérico
if (!is.numeric(x)) {
stop("Error: x debe ser numérico")
}
prediction <- get_estimation.SVF(svf_instance, list(x))
return(prediction[1])
})
# Crear los puntos de la frontera con escalones que empiezan en 0, 0
x_frontier <- c(0)
y_frontier <- c(0)
for (i in seq_along(x_range)) {
x <- x_range[i]
y <- y_predictions[i]
if (y > tail(y_frontier, 1)) {
x_frontier <- c(x_frontier, x - 0.01)  # Ajuste hacia la izquierda
y_frontier <- c(y_frontier, tail(y_frontier, 1))
x_frontier <- c(x_frontier, x - 0.01)  # Ajuste hacia la izquierda
y_frontier <- c(y_frontier, y + 0.25)  # Ajuste hacia arriba
}
}
# Plotear los datos originales
plot(svf_instance$data[[svf_instance$inputs[1]]],
svf_instance$data[[svf_instance$outputs[1]]],
col = 'blue', pch = 16, xlab = svf_instance$inputs[1], ylab = svf_instance$outputs[1])
# Plotear la frontera del modelo
lines(x_frontier, y_frontier, col = 'red')
# Añadir leyenda y título
legend('topright', legend = c('Datos originales', 'Frontera SVF'), col = c('blue', 'red'), pch = c(16, NA), lty = c(NA, 1))
title(main = 'Frontera generada por el modelo SVF')
}
library(ggplot2)
#' Función que crea un objeto del tipo SVF en función del método que se selecciona
#'
#' Esta función es un constructor que permite crear diferentes tipos de objetos SVF.
#' Actualmente, solo soporta el tipo 'SSVF', pero puede ser extendida para incluir
#' otros tipos. Si el método especificado no es soportado, se producirá un error.
#'
#' @param method Método SVF que se quiere utilizar.
#' @param inputs Inputs a evaluar en el conjunto de datos.
#' @param outputs Outputs a evaluar en el conjunto de datos.
#' @param data Conjunto de datos a evaluar.
#' @param c Valores del hiperparámetro C del modelo.
#' @param eps Valores del hiperparámetro épsilon del modelo.
#' @param d Valor del hiperparámetro d del modelo.
#'
#' @example examples/example_create_svf.R
#'
#' @return Devuelve un objeto del método SVF seleccionado.
#'
#' @export
create_SVF <- function(method, inputs, outputs, data, c, eps, d) {
if (method == "SSVF") {
svf <- SSVF(method, inputs, outputs, data, c, eps, d)
} else {
stop("The method selected doesn't exist")
}
return(svf)
}
plot_svf_frontier <- function(svf_instance) {
# Crear un grid de puntos para graficar
x_min <- min(svf_instance$data[[svf_instance$inputs[1]]])
x_max <- max(svf_instance$data[[svf_instance$inputs[1]]])
x_range <- seq(x_min, x_max, length.out = 500)
# Obtener las predicciones del modelo para cada punto en el grid
y_predictions <- sapply(x_range, function(x) {
# Asegurarse de que x sea numérico
if (!is.numeric(x)) {
stop("Error: x debe ser numérico")
}
prediction <- get_estimation.SVF(svf_instance, list(x))
return(prediction[1])
})
# Crear los puntos de la frontera con escalones que empiezan en 0, 0
x_frontier <- c(0)
y_frontier <- c(0)
for (i in seq_along(x_range)) {
x <- x_range[i]
y <- y_predictions[i]
if (y > tail(y_frontier, 1)) {
x_frontier <- c(x_frontier, x - 0.01)  # Ajuste hacia la izquierda
y_frontier <- c(y_frontier, tail(y_frontier, 1))
x_frontier <- c(x_frontier, x - 0.01)  # Ajuste hacia la izquierda
y_frontier <- c(y_frontier, y + 0.25)  # Ajuste hacia arriba
}
}
# Plotear los datos originales
plot(svf_instance$data[[svf_instance$inputs[1]]],
svf_instance$data[[svf_instance$outputs[1]]],
col = 'blue', pch = 16, xlab = svf_instance$inputs[1], ylab = svf_instance$outputs[1])
# Plotear la frontera del modelo
lines(x_frontier, y_frontier, col = 'red')
# Añadir leyenda y título
legend('topright', legend = c('Datos originales', 'Frontera SVF'), col = c('blue', 'red'), pch = c(16, NA), lty = c(NA, 1))
title(main = 'Frontera generada por el modelo SVF')
}
source("~/Documents/GitHub/svfpackage/R/svf_solution.R")
source("~/Documents/GitHub/svfpackage/R/svf_functions.R")
source("~/Documents/GitHub/svfpackage/R/grid.R")
source("~/Documents/GitHub/svfpackage/R/svfgrid.R")
source("~/Documents/GitHub/svfpackage/R/svf.R")
source("~/Documents/GitHub/svfpackage/R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 3
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
source("~/Documents/GitHub/svfpackage/R/svf_solution.R")
source("~/Documents/GitHub/svfpackage/R/svf_functions.R")
source("~/Documents/GitHub/svfpackage/R/grid.R")
source("~/Documents/GitHub/svfpackage/R/svfgrid.R")
source("~/Documents/GitHub/svfpackage/R/svf.R")
source("~/Documents/GitHub/svfpackage/R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 3
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
library(ggplot2)
#' Función que crea un objeto del tipo SVF en función del método que se selecciona
#'
#' Esta función es un constructor que permite crear diferentes tipos de objetos SVF.
#' Actualmente, solo soporta el tipo 'SSVF', pero puede ser extendida para incluir
#' otros tipos. Si el método especificado no es soportado, se producirá un error.
#'
#' @param method Método SVF que se quiere utilizar.
#' @param inputs Inputs a evaluar en el conjunto de datos.
#' @param outputs Outputs a evaluar en el conjunto de datos.
#' @param data Conjunto de datos a evaluar.
#' @param c Valores del hiperparámetro C del modelo.
#' @param eps Valores del hiperparámetro épsilon del modelo.
#' @param d Valor del hiperparámetro d del modelo.
#'
#' @example examples/example_create_svf.R
#'
#' @return Devuelve un objeto del método SVF seleccionado.
#'
#' @export
create_SVF <- function(method, inputs, outputs, data, c, eps, d) {
if (method == "SSVF") {
svf <- SSVF(method, inputs, outputs, data, c, eps, d)
} else {
stop("The method selected doesn't exist")
}
return(svf)
}
plot_svf_frontier <- function(svf_instance) {
# Crear un grid de puntos para graficar
x_min <- min(svf_instance$data[[svf_instance$inputs[1]]])
x_max <- max(svf_instance$data[[svf_instance$inputs[1]]])
x_range <- seq(x_min, x_max, length.out = 500)
# Obtener las predicciones del modelo para cada punto en el grid
y_predictions <- sapply(x_range, function(x) {
# Asegurarse de que x sea numérico
if (!is.numeric(x)) {
stop("Error: x debe ser numérico")
}
prediction <- get_estimation.SVF(svf_instance, list(x))
return(prediction[1])
})
# Crear los puntos de la frontera con escalones que empiezan en 0, 0
x_frontier <- c(0)
y_frontier <- c(0)
for (i in seq_along(x_range)) {
x <- x_range[i]
y <- y_predictions[i]
if (y > tail(y_frontier, 1)) {
x_frontier <- c(x_frontier, x - 0.01)  # Ajuste hacia la izquierda
y_frontier <- c(y_frontier, tail(y_frontier, 1))
x_frontier <- c(x_frontier, x - 0.01)  # Ajuste hacia la izquierda
y_frontier <- c(y_frontier, y + 0.20)  # Ajuste hacia arriba
}
}
# Plotear los datos originales
plot(svf_instance$data[[svf_instance$inputs[1]]],
svf_instance$data[[svf_instance$outputs[1]]],
col = 'blue', pch = 16, xlab = svf_instance$inputs[1], ylab = svf_instance$outputs[1])
# Plotear la frontera del modelo
lines(x_frontier, y_frontier, col = 'red')
# Añadir leyenda y título
legend('topleft', legend = c('Datos originales', 'Frontera SVF'), col = c('blue', 'red'), pch = c(16, NA), lty = c(NA, 1))
title(main = 'Frontera generada por el modelo SVF')
}
source("~/Documents/GitHub/svfpackage/R/svf_solution.R")
source("~/Documents/GitHub/svfpackage/R/svf_functions.R")
source("~/Documents/GitHub/svfpackage/R/grid.R")
source("~/Documents/GitHub/svfpackage/R/svfgrid.R")
source("~/Documents/GitHub/svfpackage/R/svf.R")
source("~/Documents/GitHub/svfpackage/R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 3
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
source("~/Documents/GitHub/svfpackage/R/svf_solution.R")
source("~/Documents/GitHub/svfpackage/R/svf_functions.R")
source("~/Documents/GitHub/svfpackage/R/grid.R")
source("~/Documents/GitHub/svfpackage/R/svfgrid.R")
source("~/Documents/GitHub/svfpackage/R/svf.R")
source("~/Documents/GitHub/svfpackage/R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 2
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
source("~/Documents/GitHub/svfpackage/R/svf_solution.R")
source("~/Documents/GitHub/svfpackage/R/svf_functions.R")
source("~/Documents/GitHub/svfpackage/R/grid.R")
source("~/Documents/GitHub/svfpackage/R/svfgrid.R")
source("~/Documents/GitHub/svfpackage/R/svf.R")
source("~/Documents/GitHub/svfpackage/R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 4
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
source("~/Documents/GitHub/svfpackage/R/svf_solution.R")
source("~/Documents/GitHub/svfpackage/R/svf_functions.R")
source("~/Documents/GitHub/svfpackage/R/grid.R")
source("~/Documents/GitHub/svfpackage/R/svfgrid.R")
source("~/Documents/GitHub/svfpackage/R/svf.R")
source("~/Documents/GitHub/svfpackage/R/ssvf.R")
# Definir los datos
data <- data.frame(
x1 = c(1, 2, 3, 4),
y1 = c(1, 3, 2, 4)
)
# Definir listas de inputs, outputs y la cantidad de particiones
inputs <- c("x1")
outputs <- c("y1")
d <- 3
# Parámetros iniciales del modelo SVF
C <- 1
eps <- 0
method <- 'SSVF'
# Instanciar y entrenar el modelo SVF
svf_instance <- create_SVF(method, inputs, outputs, data, C, eps, d)
svf_instance <- train.SSVF(svf_instance)
# Resolver el modelo y mostrar las soluciones
svf_solution <- solve(svf_instance)
# Imprimir las soluciones de w
print(svf_solution$w)
print(svf_solution$xi)
# Probar la función get_estimation
estimations <- list(
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(3)),
get_estimation.SVF(svf_instance, c(1)),
get_estimation.SVF(svf_instance, c(7)),
get_estimation.SVF(svf_instance, c(2)),
get_estimation.SVF(svf_instance, c(3))
)
# Imprimir las estimaciones
for (i in seq_along(estimations)) {
cat(sprintf("Estimación %d: %s\n", i + 1, estimations[[i]]))
}
# Usar la función para graficar la frontera de producción
plot_svf_frontier(svf_instance)
devtools::load_all()
devtools::document()
